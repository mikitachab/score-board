// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mikitachab/score-board/db (interfaces: RepositoryInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/mikitachab/score-board/db"
	reflect "reflect"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreatePlay mocks base method
func (m *MockRepositoryInterface) CreatePlay(arg0 string) (db.Play, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlay", arg0)
	ret0, _ := ret[0].(db.Play)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlay indicates an expected call of CreatePlay
func (mr *MockRepositoryInterfaceMockRecorder) CreatePlay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlay", reflect.TypeOf((*MockRepositoryInterface)(nil).CreatePlay), arg0)
}

// CreatePlayer mocks base method
func (m *MockRepositoryInterface) CreatePlayer(arg0 string) (*db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", arg0)
	ret0, _ := ret[0].(*db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer
func (mr *MockRepositoryInterfaceMockRecorder) CreatePlayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockRepositoryInterface)(nil).CreatePlayer), arg0)
}

// GetAllPlayers mocks base method
func (m *MockRepositoryInterface) GetAllPlayers() []db.Player {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlayers")
	ret0, _ := ret[0].([]db.Player)
	return ret0
}

// GetAllPlayers indicates an expected call of GetAllPlayers
func (mr *MockRepositoryInterfaceMockRecorder) GetAllPlayers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlayers", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAllPlayers))
}

// GetAllPlays mocks base method
func (m *MockRepositoryInterface) GetAllPlays() []db.Play {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlays")
	ret0, _ := ret[0].([]db.Play)
	return ret0
}

// GetAllPlays indicates an expected call of GetAllPlays
func (mr *MockRepositoryInterfaceMockRecorder) GetAllPlays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlays", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAllPlays))
}

// GetPlayScoresForPlay mocks base method
func (m *MockRepositoryInterface) GetPlayScoresForPlay(arg0 db.Play) []db.PlayScore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayScoresForPlay", arg0)
	ret0, _ := ret[0].([]db.PlayScore)
	return ret0
}

// GetPlayScoresForPlay indicates an expected call of GetPlayScoresForPlay
func (mr *MockRepositoryInterfaceMockRecorder) GetPlayScoresForPlay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayScoresForPlay", reflect.TypeOf((*MockRepositoryInterface)(nil).GetPlayScoresForPlay), arg0)
}

// GetPlayerByName mocks base method
func (m *MockRepositoryInterface) GetPlayerByName(arg0 string) (db.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByName", arg0)
	ret0, _ := ret[0].(db.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByName indicates an expected call of GetPlayerByName
func (mr *MockRepositoryInterfaceMockRecorder) GetPlayerByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByName", reflect.TypeOf((*MockRepositoryInterface)(nil).GetPlayerByName), arg0)
}

// SavePlayScore mocks base method
func (m *MockRepositoryInterface) SavePlayScore(arg0 db.Player, arg1 db.Play, arg2 db.SevenWondersScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePlayScore", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePlayScore indicates an expected call of SavePlayScore
func (mr *MockRepositoryInterfaceMockRecorder) SavePlayScore(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePlayScore", reflect.TypeOf((*MockRepositoryInterface)(nil).SavePlayScore), arg0, arg1, arg2)
}

// SaveScores mocks base method
func (m *MockRepositoryInterface) SaveScores(arg0 map[string]*db.SevenWondersScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveScores", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveScores indicates an expected call of SaveScores
func (mr *MockRepositoryInterfaceMockRecorder) SaveScores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveScores", reflect.TypeOf((*MockRepositoryInterface)(nil).SaveScores), arg0)
}
